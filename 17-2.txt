require("dotenv").config({ path: ".env" });
const { PrismaClient } = require("@prisma/client");

const app = require("express")();
const fs = require('fs');
const bodyParser = require('body-parser');
const jwt = require('jsonwebtoken');
const cookieParser = require('cookie-parser');
const redis = require('redis');

const prismaClient = new PrismaClient();
const redisClient = redis.createClient();

redisClient.connect();
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(cookieParser());

app.get("/register", (request, response) => {
    response.sendFile("/register.html");
  });
  
  app.post("/register", async (request, response) => {
    const { name, password } = request.body;
  
    const user = await prismaClient.user.findFirst({
      where: {
        name,
      },
    });
  
    if (user) {
      return response.status(400).send("This user already exists");
    }
  
    await prismaClient.user.create({
      data: {
        name,
        password: await bcrypt.hash(password, 10),
      },
    });
  
    res.redirect("/login");
  });

app.get('/login', (request, response) =>{
    fs.readFile('login.html', 'utf8', (err, data) => {
        if (err) {
            console.error('Error: ', err);
            response.status(500).send('Server Error');
            return;
        }
        response.send(data);
    });
});

app.post("/login", async (request, response) => {
    const { username: name, password } = request.body;
  
    const user = await prismaClient.user.findFirst({
      where: {
        name,
      },
    });
  
    if (user === null || !(await bcrypt.compare(password, user.password))) {
      return res.redirect("/login");
    }
  
    const { accessToken, refreshToken } = await createTokens(user.id, response);
  
    response.cookie("accessToken", accessToken, {
      maxAge: 10 * 60 * 1000,
      httpOnly: true,
      sameSite: "strict", // куки должны отправляться только в случае, если запрос идет с того же домена, что и сервер
    });
  
    response.cookie("refreshToken", refreshToken, {
      maxAge: 24 * 60 * 60 * 1000,
      httpOnly: true, // куки не доступны для изменения на стороне клиента
      path: "/", // куки доступны для всех страниц сайта
    });
  
    await redisClient.set(`${user.id}`, refreshToken);
    response.redirect("/resource");
});
  
const createTokens = async (id, response) => {
    const accessToken = jwt.sign({ id }, "secret", {
      expiresIn: "10m",
    });
  
    const refreshToken = jwt.sign({ id }, "secret", {
      expiresIn: "24h",
    });
  
    return { accessToken, refreshToken };
};

app.get("/refresh-token", async (req, res) => {
    try {
      const refreshToken = req.cookies?.refreshToken;
  
      if (refreshToken === undefined) {
        return res.status(401).send("Invalid token");
      }
  
      const { id } = jwt.verify(refreshToken, "secret");
  
      const savedRefreshToken = await redisClient.get(`${id}`, (error) => {
        if (error) {
          console.log(error);
        }
      });
  
      if (savedRefreshToken !== refreshToken) {
        return res.status(401).send("Invalid token");
      }
  
      const { accessToken: newAccessToken, refreshToken: newRefreshToken } =
        await createTokens(id);
  
      res.cookie("accessToken", newAccessToken, {
        maxAge: 10 * 60 * 1000,
        httpOnly: true,
        sameSite: "strict",
      });
  
      res.cookie("refreshToken", newRefreshToken, {
        maxAge: 24 * 60 * 60 * 1000,
        httpOnly: true,
        path: "/",
      });
  
      await redisClient.set(`${id}`, newRefreshToken);
  
      res.send("<h1>Refreshed token</h1>");
    } catch (error) {
      return res.status(401).send("Invalid token");
    }
});


app.get('/resource', authenticateToken, (req, res) => {
    res.send(`Welcome, ${req.user.username}!`);
});

app.get("/logout", (request, response) => {
    request.logout(function(err) {
        if (err) {
            console.error('Error during logout:', err);
        }
        request.session.destroy(); 
        response.redirect("/login"); 
    });
});
  
app.use((request, response) => {
    response.status(404).send("404 Page not found");
});

app.listen(3000, () => console.log(`Server running at http://localhost:${3000}/login\n`));
